#lang racket
(require 2htdp/universe)
(require 2htdp/image)
(provide map-generator m-l simple-m l2 lim)
(define d 40)
(define l2
  (list
   (list 1 1 0 1 1 1 1 0 1 1)
   (list 1 1 0 1 1 1 1 0 1 1)
   (list 1 1 0 0 0 1 1 0 1 1)
   (list 1 1 1 1 0 1 0 0 0 1)
   (list 1 1 1 1 0 1 0 1 0 1)
   (list 1 1 1 1 0 1 0 1 0 1)
   (list 1 1 1 1 0 1 0 1 0 1)
   (list 1 0 0 0 0 1 0 1 0 1)
   (list 1 0 1 1 1 1 0 1 0 1)
   (list 1 0 1 1 1 1 0 1 0 1)))
(define lim
  (list
   (list #t #t #f #t #t #t #t #f #t #t)
   (list #t #t #f #t #t #t #t #f #t #t)
   (list #t #t #f #f #f #t #t #f #t #t)
   (list #t #t #t #t #f #t #f #f #f #t)
   (list #t #t #t #t #f #t #f #t #f #t)
   (list #t #t #t #t #f #t #f #t #f #t)
   (list #t #t #t #t #f #t #f #t #f #t)
   (list #t #f #f #f #f #t #f #t #f #t)
   (list #t #f #t #t #t #t #f #t #f #t)
   (list #t #f #t #t #t #t #f #t #f #t)))
(define (a r)
  (cond ((= r 0) (square 40 "outline" "red"))
        ((= r 1) (square 40 "outline" "red"))
        ((= r 2) (square 40 "solid" "transparent"))
        ((= r 3) (square 40 "solid" (color 255 0 0 100)))))
(define (row-generator l)
  (define (f x y)
    (underlay/xy (a x) d 0 y))
  (foldr f (a 2) l))
(define (map-generator l)
  (define (g x y)
    (underlay/xy (row-generator x) 0 d y))
  (foldr g (row-generator '()) l))
(define (simple-m n val l)       ;;functions used for mutating lists
  (simple-m-h n val l '()))
(define (simple-m-h n val l l-r)
  (if (= n 1) (append l-r (cons val (cdr l)))
      (simple-m-h (- n 1) val (cdr l) (append l-r (list (car l))))))  
(define (m-l m n val l)
  (simple-m m (simple-m n val (list-ref l (- m 1))) l))
;functions used to mutate list of lists