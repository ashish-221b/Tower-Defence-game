#lang racket
(require 2htdp/universe)
(require 2htdp/image)
(require "base-map.rkt")
(require "paths.rkt")
(provide enemy path1-1 path1-2 path1-3 path2-1 path2-2
         path2-3 path3-1 path3-2 path3-3 creater air-creater)
(define q 0)
;;;;;;;;;;;;;;;;;;;;;
(define (enemy-data type)         ;data for various enemy types
  (cond ((equal? type 1)
         (list 100 2 9.8))
        ((equal? type 2)
         (list 200 2.5 9.8))
        ((equal? type 3)
         (list 3000 1 21.75))
        ((equal? type 4)
         (list 1000 5 19.6))
        ((equal? type 5)
         (list 1500 5 19.6))))
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
(define enemy (class object%        ;The Enemy class :-
                (init-field x);               =>Stores all the data 
                (init-field y);              =>Health postion type velocity etc.
                (init-field type);           =>This class also congtains function for moving object
                (init-field p);                on a predefined path which is an 
                (super-new);                   instantiating argument
                (define angle 0)
                (define health (car (enemy-data type)))
                (define max-health (car (enemy-data type)))
                (define velocity (cadr (enemy-data type)))
                (define off (caddr (enemy-data type)))
                (define v-f 1)
                (define (move-helper x-proc y-proc ang)
                  (set! x (x-proc x (* velocity v-f)))
                  (set! y (y-proc y (* velocity v-f)))
                  (set! angle ang))
                (define/public (move-along)      ;; p is a path so move-along is a higher order function
                  (cond ((= (p x y) 1)
                         (move-helper (位(x y) x) + 0))
                        ((= (p x y) 2)
                         (move-helper + (位(x y) x) 90))
                        ((= (p x y) 3)
                         (move-helper (位(x y) x) - 180))
                        ((= (p x y) 4)
                         (move-helper - (位(x y) x) -90))))
                (define/public (get-x) x)
                (define/public (get-y) y)
                (define/public (get-xc) (+ x off))
                (define/public (get-yc) (+ y off))
                (define/public (set-v-f a)
                  (set! v-f (/ v-f a)))
                (define/public (revert-v-f)
                  (set! v-f 1))
                (define/public (get-h) health)
                (define/public (get-max-health) max-health)
                (define/public (get-v-f) v-f)
                (define/public (get-type) type)
                (define/public (do-damage x)
                  (set! health (- health x)))
                (define/public (get-angle) angle)))
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(define (x-p m n)
  (cond ((= n 1)
         (cond ((= m 1)
                (cons path1-1 80))
               ((= m 2)
                (cons path2-1 100))
               ((= m 3)
                (cons path3-1 80))))
        ((= n 2)
         (cond ((= m 1)
                (cons path1-2 280))
               ((= m 2)
                (cons path2-2 300))
               ((= m 3)
                (cons path3-2 282))))
        ((= n 3)
         (cond ((= m 1)
                (cons path1-3 300))
               ((= m 2)
                (cons path2-3 280))
               ((= m 3)
                (cons path3-3 282))))))
(define (creater m n)
  (make-object enemy (cdr (x-p m n)) 0 m (car (x-p m n))))
(define (air-creater m x)
  (make-object enemy x 0 m air-path))